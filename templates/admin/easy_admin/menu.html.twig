{% macro render_menu_item(item, translation_domain) %}
    {% if item.type == 'divider' %}
        {{ item.label|trans(domain = translation_domain) }}
    {% else %}
        {% set menu_params = { menuIndex: item.menu_index, submenuIndex: item.submenu_index } %}
        {% set path =
            item.type == 'link' ? item.url :
            item.type == 'route' ? path(item.route, item.params) :
            item.type == 'entity' ? path('easyadmin', { entity: item.entity, action: 'list' }|merge(menu_params)|merge(item.params)) :
            item.type == 'empty' ? '#' : ''
        %}

        {# if the URL generated for the route belongs to the backend, regenerate
           the URL to include the menu_params to display the selected menu item
           (this is checked comparing the beginning of the route URL with the backend homepage URL)
        #}
        {% if item.type == 'route' and (path starts with path('easyadmin')) %}
            {% set path = path(item.route, menu_params|merge(item.params)) %}
        {% endif %}

        <a href="{{ path }}" {% if item.target|default(false) %}target="{{ item.target }}"{% endif %}>
            {% if item.icon is not empty %}<i class="fa {{ item.icon }}"></i>{% endif %}
            <span>{{ item.label|trans(domain = translation_domain) }}</span>
            {% if item.children|default([]) is not empty %}<span class="fa arrow"></span>{% endif %}
        </a>
    {% endif %}
{% endmacro %}

{% import _self as helper %}

{% block main_menu_before %}{% endblock %}

<ul class="nav" id="side-menu">
    {% set _menu_items = easyadmin_config('design.menu') %}
    {% block main_menu %}
        {% for item in _menu_items %}
            {% set currentEntity = item.entity is defined ? easyadmin_config('entities.' ~ item.entity) : item %}
            {% if is_granted(currentEntity.role) or (item.type == 'empty' and item.role is defined and is_granted(item.role)) %}
                {% block menu_item %}
                    <li class="{{ item.type == 'divider' ? 'header' }} {{ item.children is not empty ? 'treeview' }} {{ app.request.query.get('menuIndex')|default(-1) == loop.index0 ? 'page-arrow active-page menu-open' }} {{ app.request.query.get('submenuIndex')|default(-1) != -1 ? 'active' }}">
                        {{ helper.render_menu_item(item, _entity_config.translation_domain|default('messages')) }}

                        {% if item.children|default([]) is not empty %}
                            <ul class="nav nav-second-level collapse">
                                {% for subitem in item.children %}
                                    {#{% set currentSubEntity = subitem.entity is defined ? easyadmin_config('entities.' ~ subitem.entity) : subitem %}
                                    {% if is_granted(currentSubEntity.role) or (subitem.type == 'empty' and subitem.role is defined and is_granted(subitem.role)) %}#}
                                        {% block menu_subitem %}
                                        <li class="{{ subitem.type == 'divider' ? 'header' }} {{ app.request.query.get('menuIndex')|default(-1) == loop.parent.loop.index0 and app.request.query.get('submenuIndex')|default(-1) == loop.index0 ? 'page-arrow active' }}">
                                            {{ helper.render_menu_item(subitem, _entity_config.translation_domain|default('messages')) }}
                                            {% if subitem.children|default([]) is not empty %}
                                                <ul class="nav nav-second-level collapse">
                                                    {% for subsubitem in subitem.children %}
                                                        {% block menu_subsubitem %}
                                                            <li class="{{ subsubitem.type == 'divider' ? 'header' }} {{ app.request.query.get('menuIndex')|default(-1) == loop.parent.loop.index0 and app.request.query.get('submenuIndex')|default(-1) == loop.index0 ? 'page-arrow active' }}">
                                                                {{ helper.render_menu_item(subsubitem, _entity_config.translation_domain|default('messages')) }}
                                                            </li>
                                                        {% endblock menu_subsubitem %}
                                                    {% endfor %}
                                                </ul>
                                            {% endif %}
                                        </li>
                                    {% endblock menu_subitem %}
                                    {#{% endif %}#}
                                {% endfor %}
                            </ul>
                        {% endif %}
                    </li>
                {% endblock menu_item %}
            {% endif %}
        {% endfor %}
    {% endblock main_menu %}
</ul>

{% block main_menu_after %}{% endblock %}
